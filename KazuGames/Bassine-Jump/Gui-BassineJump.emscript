Overlay_SetAction( "Menu/Jouer")
{
	ToggleMenu();
	Overlay_Hide( "InGame/SubmitScore");

	if ( ! l_paused && ! l_finished)
	{
		if (l_firstPlay)
		{
			BeginGame();
		}
		else
		{
			KazuPlayGame();
			if (l_infos == "ok" || g_fucked || l_infos == "tech error")
			{
				BeginGame();
			};
		};
	}
	else
	{
		ContinueGame();
	};
};

Overlay_SetAction( "Menu/Recommencer")
{
	ToggleMenu();
	Overlay_Hide( "InGame/SubmitScore");

	if ( ! l_paused && ! l_finished)
	{
		if (l_firstPlay)
		{
			BeginGame();
		}
		else
		{
			KazuPlayGame();
			if (l_infos == "ok" || g_fucked || l_infos == "tech error")
			{
				OverlayElement_GetByName( "Menu/Recommencer")->Hide();
				OverlayElement_GetByName( "Menu/Continuer")->Show();
				BeginGame();
			};
		};
	}
	else
	{
		ContinueGame();
	};
};

Overlay_SetAction( "Menu/Retour")
{
	Timer_KillAll();
	Sound_Stop_Global( "Ambiance");
	KazuGuiCleanup();
}

Overlay_SetAction( "Menu/Continuer")
{
	ToggleMenu();
	Overlay_Hide( "InGame/SubmitScore");
	ContinueGame();
};

Overlay_SetAction( "InGame/SubmitScore")
{
	_submitHighscore();
	Overlay_Hide( "InGame/SubmitScore");
};

Overlay_SetAction( "InGame/SubmitScore/Text")
{
	_submitHighscore();
	Overlay_Hide( "InGame/SubmitScore");
};

Overlay_SetAction( "InGame/Menu")
{
	PauseGame();
};

SetMouseLUpScript()
{
	Timer_Kill( "MusicChangeVolume");
	Timer_Kill( "SoundChangeVolume");
};

BindKey( KEYCODE_LEFT, BINDKEY_DOWN)
{
	if (l_inGame && ! l_inBalcon)
	{
		l_acceleration = 9.81;
		l_leftDown = true;
	};
};

BindKey( KEYCODE_RIGHT, BINDKEY_DOWN)
{
	if (l_inGame && ! l_inBalcon)
	{
		l_acceleration = -9.81;
		l_rightDown = true;
	};
};

BindKey( KEYCODE_LEFT, BINDKEY_UP)
{
	if (l_inGame && ! l_inBalcon)
	{
		if ( ! l_rightDown)
		{
			l_acceleration = 0.0;
		};

		l_leftDown = false;
	};
};

BindKey( KEYCODE_RIGHT, BINDKEY_UP)
{
	if (l_inGame && ! l_inBalcon)
	{
		if ( ! l_leftDown)
		{
			l_acceleration = 0.0;
		};

		l_rightDown = false;
	};
};

void NaturalInclinate()
{
	if (l_inclinaison >= 0.0)
	{
		timer( "NaturalInclinate", TIMERTYPE_REPEAT, 0.01)
		{
			if (l_inGame && ! l_inBalcon)
			{
				l_charNode->TranslateLocal( SetVector3( 0.0, 200.0, -50.0));
				l_charNode->RotateLocal( SetVector3( 1.0, 0.0, 0.0), l_inclinaison);

				l_inclinaison = l_inclinaison - 0.5;

				if (l_inclinaison < 0.0)
				{
					l_inclinaison = 0.0;
					Timer_Kill( "NaturalInclinate");
				};

				l_charNode->RotateLocal( SetVector3( 1.0, 0.0, 0.0), -l_inclinaison);
				l_charNode->TranslateLocal( SetVector3( 0.0, -200.0, 50.0));
			}
			else
			{
				Timer_Kill( "NaturalInclinate");

				l_charNode->TranslateLocal( SetVector3( 0.0, 200.0, -50.0));
				l_charNode->RotateLocal( SetVector3( 1.0, 0.0, 0.0), l_inclinaison);
				l_charNode->TranslateLocal( SetVector3( 0.0, -200.0, 50.0));
				l_inclinaison = 0.0;
			};
		};

		if (l_paused)
		{
			Timer_Pause( "NaturalInclinate");
		};
	};
};

BindKey( KEYCODE_UP, BINDKEY_DOWN)
{
	if (l_inGame && ! l_inBalcon)
	{
		Timer_Kill( "Breaking");
		Timer_Kill( "NaturalInclinate");

		timer( "Accelerating", TIMERTYPE_REPEAT, 0.01)
		{
			if (l_inGame && ! l_inBalcon)
			{
				l_charNode->TranslateLocal( SetVector3( 0.0, 200.0, -50.0));
				l_charNode->RotateLocal( SetVector3( 1.0, 0.0, 0.0), l_inclinaison);

				l_inclinaison = l_inclinaison - 2.0;

				if (l_inclinaison < 0.0)
				{
					l_inclinaison = 0.0;
					Timer_Kill( "Accelerating");
				};

				l_charNode->RotateLocal( SetVector3( 1.0, 0.0, 0.0), -l_inclinaison);
				l_charNode->TranslateLocal( SetVector3( 0.0, -200.0, 50.0));
			}
			else
			{
				Timer_Kill( "Accelerating");

				l_charNode->TranslateLocal( SetVector3( 0.0, 200.0, -50.0));
				l_charNode->RotateLocal( SetVector3( 1.0, 0.0, 0.0), l_inclinaison);
				l_charNode->TranslateLocal( SetVector3( 0.0, -200.0, 50.0));
				l_inclinaison = 0.0;
			};
		};

		if (l_paused)
		{
			Timer_Pause( "Accelerating");
		};
	};
};

BindKey( KEYCODE_UP, BINDKEY_UP)
{
	if (l_inGame && ! l_inBalcon)
	{
		Timer_Kill( "Accelerating");

		NaturalInclinate();
	};
};

BindKey( KEYCODE_DOWN, BINDKEY_DOWN)
{
	if (l_inGame && ! l_inBalcon)
	{
		Timer_Kill( "Accelerating");
		Timer_Kill( "NaturalInclinate");

		timer( "Breaking", TIMERTYPE_REPEAT, 0.01)
		{
			if (l_inGame && ! l_inBalcon)
			{
				l_charNode->TranslateLocal( SetVector3( 0.0, 200.0, -50.0));
				l_charNode->RotateLocal( SetVector3( 1.0, 0.0, 0.0), l_inclinaison);

				l_inclinaison = l_inclinaison + 1.0;

				if (l_inclinaison > 45.0)
				{
					l_inclinaison = 45.0;
					Timer_Kill( "Breaking");
				};

				l_charNode->RotateLocal( SetVector3( 1.0, 0.0, 0.0), -l_inclinaison);
				l_charNode->TranslateLocal( SetVector3( 0.0, -200.0, 50.0));
			}
			else
			{
				Timer_Kill( "Breaking");

				l_charNode->TranslateLocal( SetVector3( 0.0, 200.0, -50.0));
				l_charNode->RotateLocal( SetVector3( 1.0, 0.0, 0.0), l_inclinaison);
				l_charNode->TranslateLocal( SetVector3( 0.0, -200.0, 50.0));
				l_inclinaison = 0.0;
			};
		};

		if (l_paused)
		{
			Timer_Pause( "Breaking");
		};
	};
};

BindKey( KEYCODE_DOWN, BINDKEY_UP)
{
	if (l_inGame && ! l_inBalcon)
	{
		Timer_Kill( "Breaking");

		NaturalInclinate();
	};
};

BindKey( KEYCODE_ESCAPE, BINDKEY_UP)
{
	if (l_paused)
	{
		ContinueGame();
	}
	else
	{
		PauseGame();
	};
};

BindKey( KEYCODE_P, BINDKEY_UP)
{
	if (l_paused)
	{
		ContinueGame();
	}
	else
	{
		PauseGame();
	};
};

timer( "Initialisation", TIMERTYPE_ONCE, 0.0)
{
	InitialiseBassineJump();
};
