bool l_gameStarted;
bool l_inGame;
bool l_ballLaunched;
bool l_shootingBall;
bool l_hurtingWall;
bool l_odd;
bool l_ballShot;
bool l_hurtWall;
bool l_bricksFlowing;
bool l_ballOutOfBounds;
bool l_ballOnFloor;
bool l_endShoot;

int l_wallLine;
int l_wallBrique;
int l_minWallLine;
int l_maxWallLine;
int l_minWallBrique;
int l_maxWallBrique;
int l_maxLines;
int l_maxBriques;
int l_nbBriques;
int l_nbMaxBriques;
int l_maxTries;

real current_pitch;
real previous_pitch;
real l_ballYaw;
real l_ballPitch;
real l_mouseXPos;
real l_mouseYPos;
real l_batteXPos;
real l_batteYPos;
real l_min;
real l_offset;
real l_briqueXPos;
real l_briqueYPos;

vector3 l_initBallPower;
vector3 l_ballPower;
vector3 l_ballPosition;
vector3 l_initBattePos;
vector3 l_battePos;
vector3 l_posToInit;
vector3 l_batteStartAngle;
vector3 l_batteEndAngle;
vector3 l_batteCurrentAngle;
vector3 l_v3speed;

quaternion l_batteOrientation;
quaternion l_ballDirection;

string l_name;

object l_balle;
object l_batte;
object l_hurtObject;
object l_currentBrique;

camera g_rootCamera;

scene_node l_balleNode;
scene_node l_batteNode;
scene_node l_currentBriqueNode;

physics_object l_ballePhys;
physics_object l_battePhys;
physics_object l_wallPhys;
physics_object l_currentBriquePhys;

string l_infos;
int g_nbCoups;

void UpdateScore()
{
	if (g_score < 0)
	{
		g_score = 500;
	}
	OverlayElement_GetByName("InGame/Score/Text")->SetCaption( itoa( g_score));
}

void UpdateNbCoups()
{
	OverlayElement_GetByName("InGame/Score/NbCoupsText")->SetCaption( itoa( g_nbCoups));
}

void EndGame()
{
	KazuGuiStop();
	Overlay_Hide( "WinGame");
	Overlay_Hide( "LoseGame");
	Overlay_Show( "Menu");
	Overlay_Hide( "Score");
}

void WinGame()
{
	g_score = g_score + 50000 - (g_nbCoups * 200);
	UpdateScore();
	Overlay_Show( "WinGame");
	l_gameStarted = false;
	l_inGame = false;
	Overlay_Hide( "Menu");
	KazuGuiStop();
}

void LoseGame()
{
	g_score = g_score - (g_nbCoups * 200);
	UpdateScore();
	Overlay_Show( "LoseGame");
	l_gameStarted = false;
	l_inGame = false;
	Overlay_Hide( "Menu");
	KazuGuiStop();
}

void DestroyWall()
{
	l_name = l_hurtObject->GetName();
	l_hurtingWall = true;
	strSplitOne( l_name, "_");
	l_wallLine = atoi( strSplitOne( l_name, "_"));
	l_wallBrique = atoi( l_name);
	l_minWallLine = l_wallLine - 1;
	Echo( "Line : " + itoa( l_wallLine) + " - Brique : " + itoa( l_wallBrique));
	if (l_minWallLine < 0)
	{
		l_minWallLine = 0;
	}
	l_maxWallLine = l_wallLine + 2;
	if (l_maxWallLine > l_maxLines)
	{
		l_maxWallLine = l_maxLines;
	}
	l_minWallBrique = l_wallBrique - 2;
	if (l_minWallBrique < 0)
	{
		l_minWallBrique = 0;
	}
	l_maxWallBrique = l_wallBrique + 2;
	if (l_maxWallBrique > l_maxBriques)
	{
		l_maxWallBrique = l_maxBriques;
	}
	l_bricksFlowing = true;
	for (l_wallLine = l_minWallLine ; l_wallLine <= l_maxWallLine ; l_wallLine = l_wallLine + 1)
	{
		for (l_wallBrique = l_minWallBrique ; l_wallBrique <= l_maxWallBrique ; l_wallBrique = l_wallBrique + 1)
		{
			l_name = "Brique_" + itoa( l_wallLine) + "_" + itoa( l_wallBrique));
			l_currentBrique = Object_GetByName( l_name);
			if (Object_GetByName( l_name)->IsVisible())
			{
				l_currentBriquePhys = PhysicsObject_Create( l_currentBrique, false, false);
				l_currentBriquePhys->AddBoundingBox( SetVector3( 40.0, 20.0, 10.0), VECTOR3_ZERO);
				l_currentBriquePhys->AddForce( SetVector3( 0.0, 0.0, -200.0));
				l_currentBriquePhys->AddTorque( SetVector3( 10.0, 20.0, 50.0));
				l_nbBriques = l_nbBriques + 1;
			}
		}
	}

	g_score = l_nbBriques * 500;
	UpdateScore();

	Sound_Play( "Clong", "BalleNode");
	Sound_Play_Global( "Brique");
	Sound_Play_Global( "Brique2");
	l_hurtObject->GetPhysicsObject()->AddForce( SetVector3( 0.0, 0.0, 200.0));
	timer( "HideBricks", TIMERTYPE_ONCE, 1.0)
	{
		l_bricksFlowing = false;
		for (l_wallLine = l_minWallLine ; l_wallLine <= l_maxWallLine ; l_wallLine = l_wallLine + 1)
		{
			for (l_wallBrique = l_minWallBrique ; l_wallBrique <= l_maxWallBrique ; l_wallBrique = l_wallBrique + 1)
			{
				l_name = "Brique_" + itoa( l_wallLine) + "_" + itoa( l_wallBrique));
				if (Object_GetByName( l_name)->IsVisible())
				{
					Object_GetByName( l_name)->Hide();
					PhysicsObject_Destroy( l_name);
					Object_Destroy( Object_GetByName( l_name));
					SceneNode_Destroy( l_name);
				}
			}
		}
	}
}

void ResetBallPhys()
{
	l_ballePhys->SetForce( VECTOR3_ZERO);
	l_ballePhys->SetSpeed( VECTOR3_ZERO);
	l_ballePhys->SetAngularSpeed( VECTOR3_ZERO);
	l_ballePhys->SetTorque( VECTOR3_ZERO);
}

void ResetBall()
{
	l_balleNode->SetPosition( SetVector3( -350.0, 50.0, 0.0));
	l_ballePhys->ReassertPosition();
	ResetBallPhys();
}

void ResetBatte()
{
	l_batteNode->SetPosition( l_initBattePos);
	l_batteNode->SetOrientation( SetQuaternion( SetVector3( 1.0, 1.0, 1.0), 0.0));
}

void ResetBallAndBatte()
{
	ResetBall();
	l_ballePhys->SetEnabled( false);
	Timer_Kill( "UpdateBall");
	l_ballLaunched = false;
	l_hurtingWall = false;
	l_ballShot = false;
	ResetBatte();
	Timer_Kill( "MoveBatte");
	l_shootingBall = false;
}

void ShootBall()
{
	if ((l_ballePhys->CollisionCheck( l_battePhys, false) || l_battePhys->CollisionCheck( l_ballePhys, false)) && ! l_ballShot)
	{
		Sound_Play( "Clong", "BalleNode");
		if (l_shootingBall && ! l_hurtingWall)
		{
			ResetBallPhys();
			l_shootingBall = false;
			l_ballShot = true;
			l_v3speed = SetVector3( 0.0, 0.0, -60000.0);
			l_ballDirection = l_batteNode->GetOrientation() * SetQuaternion( SetVector3( 1.0, 0.0, 0.0), 150.0);
			l_v3speed = l_v3speed * l_ballDirection;
			l_ballePhys->AddForce( l_v3speed );
		}
	}
}

void CheckBallOutOfBounds()
{
	if ((l_ballPosition[2]) > 650.0 || (l_ballPosition[2]) < -500.0)
	{
		l_ballOutOfBounds = true;
	}
	elseif ((l_ballPosition[0]) < -350.0 || (l_ballPosition[0]) > 350.0)
	{
		l_ballOutOfBounds = true;
	}
	elseif ((l_ballPosition[1]) > 400.0)
	{
		l_ballOutOfBounds = true;
	}
	else
	{
		l_ballOutOfBounds = false;
	}
}

void CheckBallOnFloor()
{
	if (l_ballePhys->CollisionCheck( PhysicsObject_GetByName( "Sol"), false))
	{
		if (l_ballShot || l_hurtingWall)
		{
			l_ballOnFloor = false;
		}
		else
		{
			l_ballOnFloor = true;
		}
	}
	else
	{
		l_ballOnFloor = false;
	}
}

void UpdateShootInfo()
{
	if ( ! l_ballShot && ! l_endShoot)
	{
		if ((l_ballPosition[2]) > 370.0)
		{
			l_batte->SetMaterial( "Batte/OK");
		}
		if ((l_ballPosition[2]) > 600.0)
		{
			l_batte->SetMaterial( "destrubatte/metal");
		}
	}
}

void UpdateBall()
{
	if (l_inGame && l_gameStarted)
	{
		l_ballPosition = l_balleNode->GetPosition();
		l_hurtObject = ClosestObject( SetVector3( l_ballPosition[0], l_ballPosition[1], (l_ballPosition[2]) - 30.0));
		CheckBallOutOfBounds();
		CheckBallOnFloor();
		UpdateShootInfo();
		if (l_ballOutOfBounds || l_ballOnFloor)
		{
			ResetBallAndBatte();
			if (l_nbMaxBriques == l_nbBriques)
			{
				WinGame();
			}
			elseif (g_nbCoups == l_maxTries)
			{
				LoseGame();
			}
		}
		elseif (l_ballePhys->GetNumCollisions() > 0 || l_battePhys->GetNumCollisions() > 0)
		{
			ShootBall();
		}
		elseif (l_ballShot && ! l_hurtingWall && l_hurtObject->GetName()->find( "Brique_") != npos)
		{
			DestroyWall();
		}
	}
}

void LaunchBall()
{
	if ( ! l_ballLaunched && ! l_hurtingWall)
	{
		l_endShoot = false;
		l_ballPosition = SetVector3( -350.0, 50.0, 0.0);
		UpdateShootInfo();
		l_batte->SetMaterial( "Batte/NotOK");

		l_bricksFlowing = false;
		l_ballLaunched = true;
		l_shootingBall = false;
		l_hurtingWall = false;
		l_ballShot = false;
		l_ballYaw = rand( 18.0, 35.0);
		l_ballPitch = rand( -31.0, -12.0);
		l_ballPower = l_initBallPower * SetQuaternion( SetVector3( 0.0, 1.0, 0.0), l_ballYaw);
		l_ballPower = l_ballPower * SetQuaternion( SetVector3( 1.0, 0.0, 0.0), l_ballPitch);
		l_ballePhys->SetEnabled( true);
		l_ballePhys->AddForce( l_ballPower);

		timer( "MoveBatte", TIMERTYPE_PERMANENT, 0.0)
		{
			l_mouseXPos = MOUSE_POSITION_X / GENERAL_SCREEN_WIDTH;
			l_mouseYPos = MOUSE_POSITION_Y / GENERAL_SCREEN_HEIGHT;
			l_batteXPos = 0.0 + (l_mouseXPos - 0.5) * 400.0;
			l_batteYPos = 100.0 - (l_mouseYPos - 0.5) * 300.0;
			l_battePos = SetVector3( l_batteXPos, l_batteYPos, 600.0);
			l_batteNode->SetPosition( l_battePos);
			l_posToInit = l_battePos - l_initBattePos;
			l_batteOrientation = V3_GetRotationTo( l_posToInit, SetVector3( 0.0, 1.0, 0.0));
			l_batteNode->SetOrientation( l_batteOrientation);
			l_batteNode->Yaw( 180.0);
			l_battePhys->ReassertPosition();
		}
	
		timer( "LaunchBall", TIMERTYPE_PERMANENT, 0.0)
		{
			UpdateBall();
		}
	}
}

void ShootBatte()
{
	if ( ! l_shootingBall && ! l_ballShot)
	{
		g_nbCoups = g_nbCoups + 1;
		UpdateNbCoups();
		l_shootingBall = true;
		Timer_Kill( "MoveBatte");
		Sound_Play_Global( "Woosh");
		timer( "ShootBall", TIMERTYPE_CONTINUOUS, 0.2)
		{
			l_batteCurrentAngle = V3_CubicInterpolation( l_batteStartAngle, l_batteEndAngle, CURRENTTIMER_TIME_LEFT / 0.2);
			l_batteNode->SetOrientation( l_batteOrientation * SetQuaternion( SetVector3( 1.0, 0.0, 0.0), l_batteCurrentAngle[0]));
			l_batteNode->Yaw( 180.0);
			l_battePhys->ReassertPosition();
		}
		timer( "EndShootBatte", TIMERTYPE_ONCE, 0.2)
		{
			l_batte->SetMaterial( "destrubatte/metal");
			l_endShoot = true;
		}
	}
}

void BuildWall()
{
	l_odd = false;
	l_nbMaxBriques = 0;
	l_min = -(42.5 * l_maxLines / 2.0);
	for (l_wallLine = 0 ; l_wallLine <= l_maxLines ; l_wallLine = l_wallLine + 1)
	{
		l_odd = ( ! l_odd);
		l_offset = 0.0;
		if ( ! l_odd)
		{
			l_offset = 20.0;
		}
		l_briqueYPos = 20.0 * l_wallLine;
		for (l_wallBrique = 0 ; l_wallBrique <= l_maxBriques ; l_wallBrique = l_wallBrique + 1)
		{
			l_name = "Brique_" + itoa( l_wallLine) + "_" + itoa( l_wallBrique);
			if ( ! SceneNode_Exists( l_name))
			{
				l_currentBriqueNode = SceneNode_Create( l_name);
				l_currentBrique = Object_Create( l_name, "brique.mesh");
			}
			else
			{
				l_currentBriqueNode = SceneNode_GetByName( l_name);
				if (Object_GetByName( l_name) != NULL)
				{
					l_currentBrique = Object_GetByName( l_name);
				}
				else
				{
					l_currentBrique = Object_Create( l_name, "brique.mesh");
				}
			}
			l_currentBrique->SetParent( l_currentBriqueNode);
//			Echo( "BuildWall - Brique : " + l_name);
			l_currentBrique->Show();
			l_briqueXPos = l_min + l_offset + (42.5 * l_wallBrique);
			l_currentBriqueNode->SetPosition( SetVector3( l_briqueXPos, l_briqueYPos, 0.0));
			l_currentBriqueNode->SetOrientation( SetQuaternion( SetVector3( 1.0, 1.0, 1.0), 0.0));
			l_nbMaxBriques = l_nbMaxBriques + 1;
		}
	}
}

void StopGame()
{
	l_gameStarted = false;
	l_inGame = false;
	Timer_KillAll();
	ResetBallAndBatte();
	for (l_wallLine = l_minWallLine ; l_wallLine <= l_maxWallLine ; l_wallLine = l_wallLine + 1)
	{
		for (l_wallBrique = l_minWallBrique ; l_wallBrique <= l_maxWallBrique ; l_wallBrique = l_wallBrique + 1)
		{
			l_name = "Brique_" + itoa( l_wallLine) + "_" + itoa( l_wallBrique));
			if (Object_GetByName( l_name)->IsVisible())
			{
				Object_GetByName( l_name)->Hide();
				PhysicsObject_Destroy( l_name);
			}
		}
	}
	BuildWall();
	KazuGuiStop();
	Overlay_Show( "Menu");
	Overlay_Hide( "InGame/Score");
}

void PauseGame()
{
	l_inGame = false;
	Timer_PauseAll();
	KazuGuiPause();
	if (l_bricksFlowing)
	{
		for (l_wallLine = l_minWallLine ; l_wallLine <= l_maxWallLine ; l_wallLine = l_wallLine + 1)
		{
			for (l_wallBrique = l_minWallBrique ; l_wallBrique <= l_maxWallBrique ; l_wallBrique = l_wallBrique + 1)
			{
				l_name = "Brique_" + itoa( l_wallLine) + "_" + itoa( l_wallBrique));
				if (Object_GetByName( l_name)->IsVisible())
				{
					Object_GetByName( l_name)->GetPhysicsObject()->SetEnabled( false);
				}
			}
		}
	}
	if (l_ballLaunched)
	{
		l_ballePhys->SetEnabled( false);
	}
	Overlay_Hide( "InGame/Score");
}

void ContinueGame()
{
	Timer_PlayAll();
	KazuGuiResume();
	if (l_bricksFlowing)
	{
		for (l_wallLine = l_minWallLine ; l_wallLine <= l_maxWallLine ; l_wallLine = l_wallLine + 1)
		{
			for (l_wallBrique = l_minWallBrique ; l_wallBrique <= l_maxWallBrique ; l_wallBrique = l_wallBrique + 1)
			{
				l_name = "Brique_" + itoa( l_wallLine) + "_" + itoa( l_wallBrique));
				if (Object_GetByName( l_name)->IsVisible())
				{
					Object_GetByName( l_name)->GetPhysicsObject()->SetEnabled( true);
				}
			}
		}
	}
	if (l_ballLaunched)
	{
		l_ballePhys->SetEnabled( true);
	}
	Overlay_Show( "InGame/Score");
	timer( "StartGame", TIMERTYPE_ONCE, 0.1)
	{
		l_inGame = true;
	}
}

void BeginGame()
{
	l_gameStarted = true;
	l_ballLaunched = false;
	l_shootingBall = false;
	l_hurtingWall = false;

	l_nbBriques = 0;
	g_score = 0;
	g_nbCoups = 0;
	UpdateScore();
	UpdateNbCoups();
	KazuGuiBegin();

	Overlay_Show( "InGame/Score");
	timer( "StartGame", TIMERTYPE_ONCE, 0.1)
	{
		l_inGame = true;
	}
}

void InitialiseWallDestruction()
{
	g_rootCamera = Camera_GetByName( "RootCamera");

	l_maxLines = 12;
	l_maxBriques = 10;
	l_maxTries = 50;

	l_initBallPower = SetVector3( 0.0, 0.0, 40000.0);
	l_initBattePos = SetVector3( 0.0, 0.0, 600.0);
	l_batteStartAngle = SetVector3( 0.0, 0.0, 0.0);
	l_batteEndAngle = SetVector3( 90.0, 0.0, 0.0);

	l_ballLaunched = false;
	l_shootingBall = false;
	l_hurtingWall = false;
	l_bricksFlowing = false;

	l_balle = Object_GetByName( "Balle");
	l_ballePhys = l_balle->GetPhysicsObject();
	l_balleNode = l_balle->GetParent();
	l_ballePhys->SetEnabled( false);

	l_batte = Object_GetByName( "Batte");
	l_battePhys = l_batte->GetPhysicsObject();
	l_batteNode = l_batte->GetParent();

	l_wallPhys = Object_GetByName( "WallBox")->GetPhysicsObject();

	l_gameStarted = false;
	l_inGame = false;

	Overlay_Hide( "WinGame");
	Overlay_Hide( "LoseGame");
	Overlay_Hide( "InGame/Score");

	Sound_Play_Global( "Ambiance");

	OverlayElement_GetByName( "Commandes/Text")->SetCaption( "La seule commande a connaitre est le clic gauche de la souris qui lance le balle, et qui permet de frapper avec la batte." );
	OverlayElement_GetByName( "Regles/Text")->SetCaption( "Essayez de detruire le mur en vous servant de la batte. Vous avez 50 coups pour atteindre cet objectif." );
	OverlayElement_GetByName( "Title")->SetMaterial( "TitreWallDestruction" );
	KazuGuiInit();
}

InitialiseWallDestruction();
BuildWall();