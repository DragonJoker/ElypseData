bool l_dicesLaunched;
bool l_dicesStopped;
bool l_speedLower;
bool l_angularSpeedLower;
bool l_diceStopped;

int i;
int l_nbDicesToLaunch;
int l_currentDice;
int l_faceValue;
int l_nbTries;
int l_maxTries;

real l_xAngle;
real l_yAngle;
real l_zAngle;
real l_diceX;

vector3 l_result;
vector3 l_minSpeed;
vector3 l_minAngularSpeed;

struct Godet
{
	vector3 startPosition;
	vector3 middlePosition;
	vector3 endPosition;
	vector3 currentPosition;
	vector3 startAngle;
	vector3 middleAngle;
	vector3 endAngle;
	vector3 currentAngle;
	scene_node node;
};

struct Dice
{
	bool stopped;
	bool kept;
	vector3 startPos;
	vector3 currentPos;
	vector3 endPos;
	vector3 startAngle;
	vector3 currentAngle;
	vector3 endAngle;
	quaternion currentOrientation;
	quaternion previousOrientation;
	scene_node node;
	physics_object phys;
};

Godet l_godet;
Dice l_dice1;
Dice l_dice2;
Dice l_dice3;

vector3 l_axis;

quaternion l_orientation;

string l_name;
string l_dicesKept;
string l_dicesToLaunch;
string l_launchFaces;
string l_keptFaces;
string l_checkFaces;
string fl_faces;

object l_selectedObject;

int g421BonusPoints = 0;

void Pause421()
{
	KazuGuiPause();
}

void Continue421()
{
	KazuGuiResume();
}

void Begin421()
{
	KazuGuiBegin();
	Timer_PlayAll();
	l_nbTries = 0;
}

void Initialise421();

void Stop421()
{
	Initialise421();
	KazuGuiRestart();
	Object_GetByName( "Dice1")->SetSubMaterial( 0, "421/surface");
	Object_GetByName( "Dice2")->SetSubMaterial( 0, "421/surface");
	Object_GetByName( "Dice3")->SetSubMaterial( 0, "421/surface");
	l_keptFaces->clear();
	l_name->clear();
	l_dicesKept->clear();
	l_dicesToLaunch->clear();
	l_launchFaces->clear();
	l_checkFaces->clear();
	l_dice1.kept = false;
	l_dice2.kept = false;
	l_dice3.kept = false;
	SceneNode_GetByName( "Dice1")->SetVisible( false);
	SceneNode_GetByName( "Dice2")->SetVisible( false);
	SceneNode_GetByName( "Dice3")->SetVisible( false);
}

void DoComputeBonusPoints()
{
	g421BonusPoints = 0;

	if ( l_launchFaces->find( "4" ) != npos
		&& l_launchFaces->find( "1" ) != npos
		&& l_launchFaces->find( "2") != npos )
	{
		// 421 on the three dices of the throw.
		g421BonusPoints = 1000;
	}
	elseif ( fl_faces->find( "4" ) != npos
		&& fl_faces->find( "1" ) != npos
		&& fl_faces->find( "2") != npos )
	{
		// 421 with all three dices of the throw and kept ones.
		if ( ( l_launchFaces->find( "1" ) != npos && l_launchFaces->find( "2" ) != npos )
			|| ( l_launchFaces->find( "1" ) != npos && l_launchFaces->find( "4" ) != npos )
			|| ( l_launchFaces->find( "2" ) != npos && l_launchFaces->find( "4" ) != npos ) )
		{
			// Two from the throw.
			g421BonusPoints = 500;
		}
		elseif ( l_launchFaces->find( "1" ) != npos
			|| l_launchFaces->find( "2" ) != npos
			|| l_launchFaces->find( "4" ) != npos )
		{
			// One from the throw.
			g421BonusPoints = 200;
		}
	}
}

string DoCheckDices( string p_faces )
{
	Echo( "DoCheckDices 1 - " + l_keptFaces + " - " + l_launchFaces );
	Echo( "DoCheckDices 2 - " + l_keptFaces + l_launchFaces );
	fl_faces = l_keptFaces + l_launchFaces;
	DoComputeBonusPoints();
	Echo( "DoCheckDices 3 - " + fl_faces );

	if ( fl_faces->find( "4" ) != npos
		&& fl_faces->find( "1" ) != npos
		&& fl_faces->find( "2") != npos )
	{
		Echo( "DoCheckDices - Win" );
		g_score = l_keptFaces->length() * 100 + g421BonusPoints * ( l_maxTries - l_nbTries ) );
		KazuGuiStop();
		KazuWinGame();
	}
	elseif ( l_nbTries == l_maxTries )
	{
		Echo( "DoCheckDices - Lose" );
		g_score = 0;
		KazuGuiStop();
		KazuLoseGame( false );
	}

	return fl_faces;
}

void CheckEndDices()
{
	l_keptFaces = DoCheckDices( l_keptFaces );
}

void CheckDices()
{
	l_checkFaces = DoCheckDices( l_checkFaces );
}

void End421()
{
	KazuGuiRestart();
}

void IsSpeedLower( vector3 p_speed, vector3 p_minSpeed)
{
	l_speedLower = (abs(p_speed[0]) < abs(p_minSpeed[0])
		&& abs(p_speed[1]) < abs(p_minSpeed[1])
		&& abs(p_speed[2]) < abs(p_minSpeed[2]));
}

void IsAngularSpeedLower( vector3 p_angularSpeed, vector3 p_minAngularSpeed, scene_node p_iasDice)
{
	l_angularSpeedLower = (abs(p_angularSpeed[0]) < abs(p_minAngularSpeed[0])
		&& abs(p_angularSpeed[1]) < abs(p_minAngularSpeed[1])
		&& abs(p_angularSpeed[2]) < abs(p_minAngularSpeed[2]));
}

void DiceStopped( vector3 p_dsSpeed, vector3 p_dsAngularSpeed, scene_node p_dsDice)
{
	IsSpeedLower( p_dsSpeed, l_minSpeed);
	IsAngularSpeedLower( p_dsAngularSpeed, l_minAngularSpeed, p_dsDice);
	l_diceStopped = (l_speedLower && l_angularSpeedLower);
}

void RetrieveFace( scene_node p_rfDice)
{
	l_orientation = p_rfDice->GetOrientation();
	l_result = l_orientation * UNIT_X; // 3
	if (abs( (l_result[1]) - 1.0) < 0.1)
	{
		l_axis = UNIT_X;
		l_faceValue = 3;
	}
	else
	{
		l_result = l_orientation * UNIT_Y; // 6
		if (abs( (l_result[1]) - 1.0) < 0.1)
		{
			l_axis = UNIT_Y;
			l_faceValue = 6;
		}
		else
		{
			l_result = l_orientation * UNIT_Z; // 2
			if (abs( (l_result[1]) - 1.0) < 0.1)
			{
				l_axis = UNIT_Z;
				l_faceValue = 2;
			}
			else
			{
				l_result = l_orientation * NEGATIVE_UNIT_X; // 4
				if (abs( (l_result[1]) - 1.0) < 0.1)
				{
					l_axis = NEGATIVE_UNIT_X;
					l_faceValue = 4;
				}
				else
				{
					l_result = l_orientation * NEGATIVE_UNIT_Y; // 1
					if (abs( (l_result[1]) - 1.0) < 0.1)
					{
						l_axis = NEGATIVE_UNIT_Y;
						l_faceValue = 1;
					}
					else
					{
						l_result = l_orientation * NEGATIVE_UNIT_Z; // 5
						if (abs( (l_result[1]) - 1.0) < 0.1)
						{
							l_axis = NEGATIVE_UNIT_Z;
							l_faceValue = 5;
						}
						else
						{
							Echo( "UnknownFace");
						}
					}
				}
			}
		}
	}
}

void Reorient( scene_node p_rNode)
{
	if (l_axis == UNIT_X)
	{// 3
		p_rNode->Pitch( -p_rNode->GetPitch());
	}
	elseif (l_axis == NEGATIVE_UNIT_X)
	{// 4
		p_rNode->Pitch( -p_rNode->GetPitch());
	}
	elseif (l_axis == UNIT_Y)
	{// 6
		p_rNode->Yaw( -p_rNode->GetYaw());
	}
	elseif (l_axis == NEGATIVE_UNIT_Y)
	{// 1
		p_rNode->Yaw( -p_rNode->GetYaw());
	}
	elseif (l_axis == UNIT_Z)
	{// 2
		p_rNode->Yaw( -p_rNode->GetYaw());
	}
	elseif (l_axis == NEGATIVE_UNIT_Z)
	{// 5
		p_rNode->Yaw( -p_rNode->GetYaw());
	}
}

void StopDice( scene_node p_sdDice, physics_object p_sdDicePhys)
{
	p_sdDicePhys->SetEnabled( false);
	RetrieveFace( p_sdDice);
}

void UpdateDices()
{
	for (i = 0 ; i < l_nbDicesToLaunch ; i++)
	{
		if (i == 0 && ! l_dice1.stopped)
		{
			l_dice1.currentOrientation = l_dice1.node->GetOrientation();
			DiceStopped( l_dice1.phys->GetSpeed(), l_dice1.phys->GetAngularSpeed(), l_dice1.node);
			if (l_diceStopped)
			{
				l_dice1.stopped = true;
				l_diceX = l_diceX + 20.0;
				StopDice( l_dice1.node, l_dice1.phys);
				l_launchFaces = l_launchFaces + itoa( l_faceValue);
			}
			l_dice1.previousOrientation = l_dice1.currentOrientation;
		}
		elseif (i == 1 && ! l_dice2.stopped)
		{
			l_dice2.currentOrientation = l_dice2.node->GetOrientation();
			DiceStopped( l_dice2.phys->GetSpeed(), l_dice2.phys->GetAngularSpeed(), l_dice2.node);
			if (l_diceStopped)
			{
				l_dice2.stopped = true;
				l_diceX = l_diceX + 20.0;
				StopDice( l_dice2.node, l_dice2.phys);
				l_launchFaces = l_launchFaces + itoa( l_faceValue);
			}
			l_dice2.previousOrientation = l_dice2.currentOrientation;
		}
		elseif (i == 2 && ! l_dice3.stopped)
		{
			l_dice3.currentOrientation = l_dice3.node->GetOrientation();
			DiceStopped( l_dice3.phys->GetSpeed(), l_dice3.phys->GetAngularSpeed(), l_dice3.node);
			if (l_diceStopped)
			{
				l_dice3.stopped = true;
				l_diceX = l_diceX + 20.0;
				StopDice( l_dice3.node, l_dice3.phys);
				l_launchFaces = l_launchFaces + itoa( l_faceValue);
			}
			l_dice3.previousOrientation = l_dice3.currentOrientation;
		}
	}

	l_dicesStopped = ( l_dice1.stopped && l_dice2.stopped && l_dice3.stopped );

	if (l_dicesStopped)
	{
		Echo( "Dices Stopped");
		Timer_Kill( "UpdateDices");
		
		if ( l_nbTries == l_maxTries )
		{
			CheckEndDices();
		}
		else
		{
			CheckDices();
		}
	}
}

void LaunchDice( scene_node p_ldDice, physics_object p_ldDicePhys, vector3 p_ldPosition)
{
	l_xAngle = rand( 0.0, 4.0);
	l_yAngle = rand( 0.0, 4.0);
	l_zAngle = rand( 0.0, 4.0);
	p_ldDice->SetPosition( p_ldPosition);
	p_ldDice->SetVisible( true);
	p_ldDice->Pitch( l_xAngle * 90.0);
	p_ldDice->Yaw( l_yAngle * 90.0);
	p_ldDice->RotateLocal( UNIT_Z, l_zAngle * 90.0);
	p_ldDicePhys->ReassertPosition();
	p_ldDice->Hide();
}

void EndDiceLaunch( scene_node p_edlDice, physics_object p_edlDicePhys)
{
	p_edlDice->Show();
	Sound_Play( p_edlDice->GetName(), p_edlDice->GetName());
	p_edlDicePhys->SetEnabled( true);
	p_edlDicePhys->SetSpeed( SetVector3( rand( 50.0, 80.0), rand( -30.0, -40.0), 0.0));
	p_edlDicePhys->SetAngularSpeed( SetVector3( rand( -20.0, -30.0), rand( -20.0, -30.0), rand( -20.0, -30.0)));
}

void LaunchDices()
{
	l_launchFaces->clear();
	l_nbTries = l_nbTries + 1;
	l_dicesLaunched = true;
	l_dicesStopped = false;
	l_dicesToLaunch = "123";
	l_nbDicesToLaunch = 3;
	l_currentDice = 1;
	l_diceX = (l_dicesKept->length() * 20.0) - 40.0;

	l_godet.node->SetPosition( l_godet.startPosition);
	l_godet.node->SetOrientation( SetQuaternion( UNIT_Z, l_godet.startAngle[0]));
	l_godet.node->Show();

	for (i = 0 ; i < l_dicesKept->length() ; i++)
	{
		l_dicesToLaunch->erase( l_dicesToLaunch->find( ctoa( strGetChar( l_dicesKept, i))), 1);
		l_nbDicesToLaunch = l_nbDicesToLaunch - 1;
	}

	for (i = 0 ; i < l_dicesToLaunch->length() ; i++)
	{
		l_name = "Dice" + strGetChar( l_dicesToLaunch, i);
		if (i == 0)
		{
			l_dice1.node = SceneNode_GetByName( l_name);
			l_dice1.phys = Object_GetByName( l_dice1.node->GetName())->GetPhysicsObject();
			LaunchDice( l_dice1.node, l_dice1.phys, l_godet.endPosition - SetVector3( 15.0, 8.0, 0.0));
		}
		elseif (i == 1)
		{
			l_dice2.node = SceneNode_GetByName( l_name);
			l_dice2.phys = Object_GetByName( l_dice2.node->GetName())->GetPhysicsObject();
			LaunchDice( l_dice2.node, l_dice2.phys, l_godet.endPosition);
		}
		else
		{
			l_dice3.node = SceneNode_GetByName( l_name);
			l_dice3.phys = Object_GetByName( l_dice3.node->GetName())->GetPhysicsObject();
			LaunchDice( l_dice3.node, l_dice3.phys, l_godet.endPosition + SetVector3( 15.0, 8.0, 0.0));
		}
	}

	timer( "LaunchDices", TIMERTYPE_CONTINUOUS, 0.3)
	{
		l_godet.currentPosition = V3_BezierInterpolation( l_godet.startPosition, l_godet.middlePosition, l_godet.endPosition, CURRENTTIMER_TIME_ELAPSED / 0.3);
		l_godet.node->SetPosition( l_godet.currentPosition);
		l_godet.currentAngle = V3_BezierInterpolation( l_godet.startAngle, l_godet.middleAngle, l_godet.endAngle, CURRENTTIMER_TIME_ELAPSED / 0.3);
		l_godet.node->SetOrientation( SetQuaternion( UNIT_Z, (l_godet.currentAngle[0])));
	}
	timer ( "EndDicesLaunch", TIMERTYPE_ONCE, 0.3)
	{
		l_dicesLaunched = false;
		l_godet.node->Hide();
		for (i = 0 ; i < l_nbDicesToLaunch ; i++)
		{
			if (i == 0)
			{
				l_dice1.stopped = false;
				EndDiceLaunch( l_dice1.node, l_dice1.phys);
			}
			elseif (i == 1)
			{
				l_dice2.stopped = false;
				EndDiceLaunch( l_dice2.node, l_dice2.phys);
			}
			else
			{
				l_dice3.stopped = false;
				EndDiceLaunch( l_dice3.node, l_dice3.phys);
			}
		}
		l_dice1.currentOrientation = l_dice1.node->GetOrientation();
		l_dice2.currentOrientation = l_dice2.node->GetOrientation();
		l_dice3.currentOrientation = l_dice3.node->GetOrientation();
		timer( "UpdateDices", TIMERTYPE_PERMANENT, 0.0)
		{
			UpdateDices();
		}
	}
}

void SelectDice()
{
	l_selectedObject = MousePickupObject( MOUSE_POSITION_X, MOUSE_POSITION_Y, true);
	l_name = l_selectedObject->GetName();
	if (l_name->find( "Dice") != npos)
	{
		l_name = substr( l_name, 4, 1);
		RetrieveFace( l_selectedObject->GetParent());
		if (l_selectedObject->GetSubMaterialName( 0) == "421/surface/Selected")
		{
			l_selectedObject->SetSubMaterial( 0, "421/surface");
			l_dicesKept->erase( l_dicesKept->find( l_name), 1);
			l_keptFaces->erase( l_keptFaces->find( itoa( l_faceValue)), 1);

			if (l_selectedObject->GetParent()->GetPosition() == SetVector3( -20.0, 5.0, 75.0))
			{
				l_dice1.kept = false;
			}
			elseif (l_selectedObject->GetParent()->GetPosition() == SetVector3( 0.0, 5.0, 75.0))
			{
				l_dice2.kept = false;
			}
			elseif (l_selectedObject->GetParent()->GetPosition() == SetVector3( 20.0, 5.0, 75.0))
			{
				l_dice3.kept = false;
			}
		}
		else
		{
			l_selectedObject->SetSubMaterial( 0, "421/surface/Selected");
			l_dicesKept = l_dicesKept + l_name;
			l_keptFaces = l_keptFaces + itoa( l_faceValue);
			if ( !l_dice1.kept )
			{
				l_dice1.kept = true;
				l_selectedObject->GetParent()->SetPosition( SetVector3( -20.0, 5.0, 75.0));
				Reorient( l_selectedObject->GetParent());
				l_selectedObject->GetPhysicsObject()->ReassertPosition();
			}
			elseif ( !l_dice2.kept )
			{
				l_dice2.kept = true;
				l_selectedObject->GetParent()->SetPosition( SetVector3( 0.0, 5.0, 75.0));
				Reorient( l_selectedObject->GetParent());
				l_selectedObject->GetPhysicsObject()->ReassertPosition();
			}
			elseif ( !l_dice3.kept )
			{
				l_dice3.kept = true;
				l_selectedObject->GetParent()->SetPosition( SetVector3( 20.0, 5.0, 75.0));
				Reorient( l_selectedObject->GetParent());
				l_selectedObject->GetPhysicsObject()->ReassertPosition();
			}
		}
	}
}

SetMouseLUpScript()
{
	Timer_Kill( "SoundChangeVolume");
	Timer_Kill( "MusicChangeVolume");
	if (kazuInGame && kazuGameStarted)
	{
		if ( ! l_dicesLaunched && l_dicesStopped && l_nbTries < l_maxTries)
		{
			LaunchDices();
		}
	}
}

SetMouseRUpScript()
{
	if (kazuInGame && kazuGameStarted)
	{
		if ( ! l_dicesLaunched && l_dicesStopped)
		{
			SelectDice();
		}
	}
}

void Initialise421()
{
	l_godet.node = SceneNode_GetByName( "Godet");

	l_dicesStopped = true;
	l_dicesLaunched = false;
	l_dice1.stopped = false;
	l_dice2.stopped = false;
	l_dice3.stopped = false;
	l_dice1.kept = false;
	l_dice2.kept = false;
	l_dice3.kept = false;

	l_maxTries = 3;

	l_godet.startAngle = SetVector3( 0.0, 0.0, 0.0);
	l_godet.middleAngle = SetVector3( -90.0, 0.0, 0.0);
	l_godet.endAngle = SetVector3( -120.0, 0.0, 0.0);

	l_godet.startPosition = SetVector3( -400.0, 250.0, 0.0);
	l_godet.middlePosition = SetVector3( -270.0, 70.0, 0.0);
	l_godet.endPosition = SetVector3( -150.0, 50.0, 0.0);

	l_godet.node->SetPosition( l_godet.startPosition);
	l_godet.node->SetOrientation( SetQuaternion( UNIT_Z, l_godet.startAngle[0]));

	Object_GetByName( "Dice1")->GetPhysicsObject()->SetEnabled( false);
	Object_GetByName( "Dice2")->GetPhysicsObject()->SetEnabled( false);
	Object_GetByName( "Dice3")->GetPhysicsObject()->SetEnabled( false);
	SceneNode_GetByName( "Dice1")->SetVisible( false);
	SceneNode_GetByName( "Dice2")->SetVisible( false);
	SceneNode_GetByName( "Dice3")->SetVisible( false);

	l_minSpeed = SetVector3( 0.2, 0.2, 0.2);
	l_minAngularSpeed = SetVector3( 0.05, 0.05, 0.05);

	l_dice1.endPos = SetVector3( -20.0, 40.0, 530.0);
	l_dice2.endPos = SetVector3( -20.0, 50.0, 530.0);
	l_dice3.endPos = SetVector3( -20.0, 60.0, 530.0);

	Sound_Play_Global( "Ambiance");

	OverlayElement_GetByName( "Commandes/Text" )->SetCaption( "Un clic gauche de la souris pour lancer les des. Puis clic droit sur les des a garder." );
	OverlayElement_GetByName( "Regles/Text" )->SetCaption( "L'objectif dans ce jeu est de realiser un 421 en 3 essais." );
	OverlayElement_GetByName( "Title" )->SetMaterial( "Titre421" );
	KazuGuiInit( false, false, false, false, false, false );
}

Initialise421();
